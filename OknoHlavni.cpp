#include "StdAfx.h"
#include "OknoHlavni.h"

LRESULT OknoHlavni::OnCommand(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL& bHandled)
{
	switch (LOWORD(wParam))
	{
	case ID_MENU_EDITOR_OPROGRAMU:
		MessageBox(_T("The final project into a course of Visual creativity informatics taught at the Masaryk University Faculty of Informatics. The application visualises images generated by the Iterated Function Systems. This application is developed in C++ with the use of ATL and OpenGL.\n\nAleš Pejznoch\nJanuary 2010"),
			_T("Aleš Pejznoch IFS editor"),
			MB_ICONINFORMATION);
		break;
	case ID_MENU_EDITOR_NAPOVEDA:
		MessageBox(_T("You can change or add new types of Iterated Function Systems (IFS) by changing or adding new values to the file data.dat. You have to keep the established format. Each description of an IFS has to be separated by a single line. The first line represents a name of a particular IFS.\nThe subsequent lines define the IFS itself. The first 6 values of each line describe the transformation and the last value sets the transformation probability. The sum of all probabilities has to be bigger than or equal to 1."),
			_T("Help"),
			MB_ICONINFORMATION);
		break;
	}
	bHandled = FALSE;
	return 0;
}

LRESULT OknoHlavni::OnPaint(UINT /*uMsg*/, WPARAM /*wParam*/, LPARAM /*lParam*/, BOOL& /*bHandled*/)
{
	PAINTSTRUCT ps;
	RECT rect;
	GetClientRect(&rect);
	HDC hdc = BeginPaint(&ps);
	
	EndPaint(&ps);

	return 0;
}

LRESULT OknoHlavni::OnMenuIteratorNovy(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
{
	// TODO: Add your command handler code here

	return 0;
}

LRESULT OknoHlavni::OnMenuKonec(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
{
	PostMessage(WM_CLOSE);
	return 0;
}

LRESULT OknoHlavni::OnClose(UINT /*uMsg*/, WPARAM /*wParam*/, LPARAM /*lParam*/, BOOL& /*bHandled*/)
{
	if (MessageBox(_T("Do you really want to close this app?"),
		_T("IFS editor"),
		MB_ICONQUESTION | MB_YESNO | MB_DEFBUTTON2) != IDYES) {
			return 0;
	} else {
		return DefWindowProc();
	}
}

LRESULT OknoHlavni::OnWindowPosChanged(UINT /*uMsg*/, WPARAM /*wParam*/, LPARAM /*lParam*/, BOOL& /*bHandled*/)
{
	RECT rect = {0, 0, 0, 0};
	GetClientRect(&rect);
		formular->SetWindowPos(NULL,
			rect.right-PANEL, 0, PANEL,rect.bottom,
			SWP_NOZORDER);

	RECT vnitrek;
	GetClientRect(&vnitrek);
	RECT rct = {vnitrek.left+(vnitrek.right-PANEL)/100*OKRAJ, vnitrek.top+vnitrek.bottom/100*OKRAJ,
				vnitrek.right-(vnitrek.right-PANEL)/100*OKRAJ-PANEL, vnitrek.bottom-vnitrek.bottom/100*OKRAJ};

		ogl->SetWindowPos(m_hWnd, &rct, SWP_NOZORDER);


	return 0;
}
LRESULT OknoHlavni::OnMenuIteratorUlozit(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
{
	TCHAR szsoubor[MAX_PATH] = {0};
	OPENFILENAME ofn;
	ZeroMemory(&ofn, sizeof(OPENFILENAME));
	ofn.lStructSize = sizeof(OPENFILENAME);
	ofn.lpstrFilter = _T("Picture TGA\0*.tga\0");
	ofn.lpstrFile = szsoubor;
	ofn.hwndOwner = this->m_hWnd;
	ofn.nMaxFile = sizeof(szsoubor);
	ofn.lpstrDefExt = _T("tga");
	ofn.Flags = OFN_PATHMUSTEXIST;
	if (!GetSaveFileName(&ofn) ) {
		return 0;
	}

	char g[MAX_PATH] = "t";
	WideCharToMultiByte(CP_ACP, 0, szsoubor, wcslen(szsoubor)+1, g , sizeof(g), NULL, NULL);

	
	ogl->Export(g);

	return 0;
}
LRESULT OknoHlavni::OnIter32786(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
{
	TCHAR szsoubor[MAX_PATH] = {0};
	OPENFILENAME ofn;
	ZeroMemory(&ofn, sizeof(OPENFILENAME));
	ofn.lStructSize = sizeof(OPENFILENAME);
	ofn.lpstrFilter = _T("Iterator IFS\0*.ifs\0");
	ofn.lpstrFile = szsoubor;
	ofn.hwndOwner = this->m_hWnd;
	ofn.nMaxFile = sizeof(szsoubor);
	ofn.lpstrDefExt = _T("ifs");
	ofn.Flags = OFN_PATHMUSTEXIST;
	if (!GetSaveFileName(&ofn) ) {
		return 0;
	}
	
	
	ofstream fout(szsoubor);
	if (fout.fail()) {
		return false;
	}

	char buffer[100];

	string s;
	istringstream is(ogl->typ);
	is >> s;

	strcat_s(buffer, s.c_str());

	fout << ogl->typ;
	fout << "\n";
	fout << ogl->typ2;
	fout << "\n";
	fout << ogl->zpusob;

	fout << "\n";
	fout << (INT)GetRValue(formular->barva);
	fout << "\n";
	fout << (INT)GetGValue(formular->barva);
	fout << "\n";
	fout << (INT)GetBValue(formular->barva);

	fout << "\n";
	fout << (INT)GetRValue(formular->pozadi);
	fout << "\n";
	fout << (INT)GetGValue(formular->pozadi);
	fout << "\n";
	fout << (INT)GetBValue(formular->pozadi);


	fout << "\n";
	fout << ogl->meritko;
	fout << "\n";
	fout << ogl->max_iter;
	fout << "\n";
	fout << ogl->xpoz;
	fout << "\n";
	fout << ogl->ypoz;
	fout << "\n";
	fout << ogl->ratio;
	fout << "\n";
	fout << ogl->morfuj;
	

	fout.close();

	return 0;
}

LRESULT OknoHlavni::OnIter32787(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
{
	TCHAR szsoubor[MAX_PATH] = {0};
	OPENFILENAME ofn;
	ZeroMemory(&ofn, sizeof(OPENFILENAME));
	ofn.lStructSize = sizeof(OPENFILENAME);
	ofn.lpstrFilter = _T("Iterator IFS\0*.ifs\0");
	ofn.lpstrFile = szsoubor;
	ofn.hwndOwner = this->m_hWnd;
	ofn.nMaxFile = sizeof(szsoubor);
	ofn.lpstrDefExt = _T("ifs");
	ofn.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST;
	if (!GetOpenFileName(&ofn) ) {
		return 0;
	}
	
	
	ifstream fin(szsoubor);
	if (fin.fail()) {
		return false;
	}

	string radek;
	int i=0;
	int f=0;
	int a,b,c;
	wstring h;
	while (!getline(fin, radek).fail()) {
		i++;
		istringstream stm;
		stm.str(radek);
		switch(i) {
			case 1: stm >> formular->typ;
					//formular->typ = ogl->typ;
				formular->SendDlgItemMessageW(IDC_COMBO_TI, CB_SETCURSEL, formular->typ, 0);
				break;
			case 2: stm >> formular->typ2;
					//formular->typ2 = ogl->typ2;
				formular->SendDlgItemMessageW(IDC_COMBO_TI2, CB_SETCURSEL, formular->typ2, 0);
				break;
			case 3: stm >> ogl->zpusob;
					formular->zpusob = ogl->zpusob;
				formular->SendDlgItemMessageW(IDC_COMBO_TB, CB_SETCURSEL, ogl->zpusob, 0);
				break;
			case 4: stm >> a;
				break;
			case 5: stm >> b;
				break;
			case 6: stm >> c;
				formular -> nastav_barvu = RGB(a,b,c);
				formular -> barva = RGB(a,b,c);
				break;
			case 7: stm >> a;
				break;
			case 8: stm >> b;
				break;
			case 9: stm >> c;
				formular -> pozadi = RGB(a,b,c);
				break;

			case 10: stm >> ogl->meritko;
				break;
			case 11: stm >> ogl->max_iter;
				break;
			case 12: stm >> ogl->xpoz;
				break;
			case 13: stm >> ogl->ypoz;
				break;
			case 14: stm >> formular->ro;
				/*	wistringstream wstm;
					wstm.str(radek);
					
					wstm >> h;
					formular->SetDlgItemText(IDC_RATIO, (LPCSTR)h);*/
				break;
			case 15: stm >> f;
				if (f==1) {
						formular-> vykreslit = 1;
						ogl->Morfuj(1, formular->ro, formular->typ, formular->typ2);
						ogl->Kresli(1, formular->typ, ogl->zpusob, formular->nastav_barvu, formular->pozadi);
				} else {
					formular-> vykreslit = 1;
					ogl->Morfuj(0, 0.4, formular->typ, formular->typ2);
					ogl->Kresli(1, formular->typ, ogl->zpusob, formular->nastav_barvu, formular->pozadi);
				}
					HMENU hmenu;
					hmenu = GetMenu();
					EnableMenuItem(hmenu,ID_MENU_ITERATOR_ULOZIT, MF_ENABLED);
					EnableMenuItem(hmenu,ID_ITER32786, MF_ENABLED);
				break;

		}

	}

	return 0;
}
